[ 스프링 부트 DevTools 특징 2가지 ]

1. 코드가 변경딜 때 자동으로 애플리케이션을 다시 시작시킨다.
    - DevTools를 사용 중일 때 애플리케이션은 JVM에서 두 개의 클래스 로더에 의해 로드된다.
        그 중 하나는 우리 자바 코드, 속성 파일, 프로젝트의 src/main/ 경로에 있는 모든 것과 함께 로드된다.
        이러한 것들은 자주 변경될 가능성이 있다.
        나머지 클래스 로더는 자주 변경되지 않는 의존성 라이브러리와 함께 로드된다.

        따라서 pom.xml 파일에서의 의존성 추가, 변경, 삭제할 때는 애플리케이션을 새로 시작해야 한다.

2. 템플릿 캐시를 자동으로 비활성화 & 브라우저로 전송되는 리소스 (템플릿, 자바스크립트, CSS) 가 변경될 때 자동으로 브라우저를 새로고침한다.
    - 기본적으로 타임리프와 같은 템플릿에서는 템플릿의 파싱 결과를 캐시에 저장하고 사용하도록 구성된다.
    하지만 개발 시에는 템플릿 캐싱이 그리 유용하지 않다.
    애플리케이션이 실행 중일 때 템플릿을 변경하고 브라우저를 새로고침 하더라도 여전히 변경 전의 캐싱된 템플릿이 사용되기 때문이다.

    따라서 DevTools가 사용될 때 우리 애플리케이션과 함께 자동으로 LiveReload 서버를 활성화한다.
    LiveReload 서버 자체는 그리 유용하지 않지만, 이 서버와 부합되는 LiveReload 브라우저 플러그인과 연결될 때는
    브라우저에 전달되는 거의 모든 (템플릿, 이미지, CSS, 자바스크립트 등) 에 변경이 생길 때 브라우저가 자동으로 새로고침 된다.

    LiveReload는 구글 크롬, 사파리, 파이어폭스 브라우저의 플러그인을 갖고 있다.
    따라서 브라우저에 LiveReload를 설치하여 좀 더 편해질 수 있다.
    (http://livereload.com/extensions)


[ Spring in Action - 1장까지 공부 후 리뷰 ]

> 1장에서 진행했던 작업 단계 요약
    1. 스프링 Initializr 를 사용해서 프로젝트 초기 구조 생성
    2. 홈페이지 웹 요청을 처리하기 위해 컨트롤러 클래스 작성
    3. 홈페이지를 보여주기 위해 뷰 템플릿 정의 (타임리프)
    4. 애플리케이션을 테스트하기 위해 간단한 테스트 클래스 작성 후 Junit 테스트 수행

> 1장 최종 요약
    1. 웹 애플리케이션 생성, 데이터베이스 사용, 애플리케이션 보안, 마이크로서비스 등에서 
        개발자의 노력을 덜어주는 것이 스프링의 목표다.
    2. 스프링 부트는 손쉬운 의존성 관리, 자동-구성, 런타임 시의 애플리케이션 내부 작동 파악을 스프링에서 할 수 있게 한다.
    3. 스프링 애플리케이션은 스프링 Initializr 를 사용해서 초기 설정을 할 수 있다.
        스프링 Initializr 는 웹을 기반으로 하며, 대부분의 자바 개발 환경을 지원한다.
    4. 빈(bean) 이라고 하는 컴포넌트는 스프링 애플리케이션 컨텍스트에서 자바나 XML 로 선언할 수 있으며,
        컴포넌트 탐색으로 찾거나 스프링 부트 자동-구성에서 자동으로 구성할 수도 있다. 